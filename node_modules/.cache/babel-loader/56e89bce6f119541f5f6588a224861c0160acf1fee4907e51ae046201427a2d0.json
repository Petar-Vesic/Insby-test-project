{"ast":null,"code":"const fetchProducts = async () => {\n  const apiUrl = 'https://dev-mrp.insby.tech/api';\n  try {\n    const response = await axios.get(`${apiUrl}/v2/session/product`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n\n    // Log the response data\n    console.log('Response from GET method:', response.data);\n\n    // Use index as a key for promises\n    const imagePromises = response.data.data.map((product, index) => new Promise(resolve => {\n      const img = new Image();\n      img.src = product.image_url;\n      img.onload = () => resolve({\n        ...product,\n        index\n      });\n    }));\n    const loadedProducts = await Promise.all(imagePromises);\n\n    // Sort products based on index\n    const sortedProducts = loadedProducts.sort((a, b) => a.index - b.index);\n\n    // Update state with the loaded and sorted products\n    setProducts(sortedProducts);\n  } catch (error) {\n    console.log('Error fetching product information', error);\n\n    // Handle 401 Unauthorized error\n    if (error.response && error.response.status === 401) {\n      setProducts([]);\n    }\n  }\n};","map":{"version":3,"names":["fetchProducts","apiUrl","response","axios","get","headers","Authorization","authToken","console","log","data","imagePromises","map","product","index","Promise","resolve","img","Image","src","image_url","onload","loadedProducts","all","sortedProducts","sort","a","b","setProducts","error","status"],"sources":["C:/Users/petar/Desktop/React/my-react-app/src/components/Product.js"],"sourcesContent":["const fetchProducts = async () => {\r\n  const apiUrl = 'https://dev-mrp.insby.tech/api';\r\n\r\n  try {\r\n    const response = await axios.get(`${apiUrl}/v2/session/product`, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    // Log the response data\r\n    console.log('Response from GET method:', response.data);\r\n\r\n    // Use index as a key for promises\r\n    const imagePromises = response.data.data.map((product, index) =>\r\n      new Promise((resolve) => {\r\n        const img = new Image();\r\n        img.src = product.image_url;\r\n        img.onload = () => resolve({ ...product, index });\r\n      })\r\n    );\r\n\r\n    const loadedProducts = await Promise.all(imagePromises);\r\n\r\n    // Sort products based on index\r\n    const sortedProducts = loadedProducts.sort((a, b) => a.index - b.index);\r\n\r\n    // Update state with the loaded and sorted products\r\n    setProducts(sortedProducts);\r\n  } catch (error) {\r\n    console.log('Error fetching product information', error);\r\n\r\n    // Handle 401 Unauthorized error\r\n    if (error.response && error.response.status === 401) {\r\n      setProducts([]);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,MAAM,GAAG,gCAAgC;EAE/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAE,GAAEH,MAAO,qBAAoB,EAAE;MAC/DI,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,SAAU;MACrC;IACF,CAAC,CAAC;;IAEF;IACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEP,QAAQ,CAACQ,IAAI,CAAC;;IAEvD;IACA,MAAMC,aAAa,GAAGT,QAAQ,CAACQ,IAAI,CAACA,IAAI,CAACE,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAC1D,IAAIC,OAAO,CAAEC,OAAO,IAAK;MACvB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,GAAG,GAAGN,OAAO,CAACO,SAAS;MAC3BH,GAAG,CAACI,MAAM,GAAG,MAAML,OAAO,CAAC;QAAE,GAAGH,OAAO;QAAEC;MAAM,CAAC,CAAC;IACnD,CAAC,CACH,CAAC;IAED,MAAMQ,cAAc,GAAG,MAAMP,OAAO,CAACQ,GAAG,CAACZ,aAAa,CAAC;;IAEvD;IACA,MAAMa,cAAc,GAAGF,cAAc,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACZ,KAAK,GAAGa,CAAC,CAACb,KAAK,CAAC;;IAEvE;IACAc,WAAW,CAACJ,cAAc,CAAC;EAC7B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdrB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEoB,KAAK,CAAC;;IAExD;IACA,IAAIA,KAAK,CAAC3B,QAAQ,IAAI2B,KAAK,CAAC3B,QAAQ,CAAC4B,MAAM,KAAK,GAAG,EAAE;MACnDF,WAAW,CAAC,EAAE,CAAC;IACjB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}